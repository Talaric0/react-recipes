{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","url","className","style","recipe","map","ingredient","text","Math","floor","href","rel","target","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uQAoBeA,EAlBA,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,IACpD,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,6BAAKP,IACL,8CACA,6BACGG,EAAYK,KAAI,SAAAC,GAAU,OACzB,6BAAKA,EAAWC,YAGpB,2CAAcC,KAAKC,MAAMX,MACzB,mBAAGY,KAAMT,EAAKU,IAAI,aAAaC,OAAO,SAAtC,SACE,qBAAKV,UAAWC,IAAMJ,MAAOc,IAAKd,EAAOe,IAAKjB,UC+CvCkB,G,MAzDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZfM,WAYe,oBAXdA,qCAUG,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,sBAAK7B,UAAU,MAAf,UACE,uBAAMgC,SARQ,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAKmBlB,UAAU,cAArC,UACE,uBACAA,UAAU,aACVmC,KAAK,OACLC,MAAOnB,EACPoB,SAjBe,SAAAJ,GACnBf,EAAUe,EAAEvB,OAAO0B,UAiBf,wBAAQpC,UAAU,gBAAgBmC,KAAK,SAAvC,uBAEF,mCAAMhB,EAAN,cACA,qBAAKnB,UAAU,UAAf,SACGe,EAAQZ,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEAP,MAAOO,EAAOA,OAAOoC,MACrB1C,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,IAAKG,EAAOA,OAAOH,KALdG,EAAOA,OAAOoC,iBCpCdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.0f0d4731.chunk.js","sourcesContent":["import React from 'react';\nimport style from './recipe.module.css';\nconst Recipe = ({title, calories, image, ingredients, url}) => {\n  return(\n    <div className={style.recipe}>\n      <h2>{title}</h2>\n      <h3>Ingredients:</h3>\n      <ol>\n        {ingredients.map(ingredient => (\n          <li>{ingredient.text}</li>\n        ))}\n      </ol>\n      <p>Calories: {Math.floor(calories)}</p>\n      <a href={url} rel=\"noreferrer\" target=\"_blank\">\n        <img className={style.image} src={image} alt={title} />\n      </a>\n    </div>\n  );\n}\n\nexport default Recipe;","import React,{ useEffect, useState} from \"react\";\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = process.env.REACT_APP_APP_ID;\n  const APP_KEY = process.env.REACT_APP_APP_KEY;\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input \n        className=\"search-bar\" \n        type=\"text\" \n        value={search} \n        onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <h2> {query} recipes</h2>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe \n          key={recipe.recipe.label}\n          title={recipe.recipe.label} \n          calories={recipe.recipe.calories} \n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n          url={recipe.recipe.url} />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}